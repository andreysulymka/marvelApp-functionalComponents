{"version":3,"file":"static/js/994.c5c02d14.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoudary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return <img style={{\r\n        display: 'block', width: '250px', height: '250px',\r\n    objectFit: 'contain', margin: '0 auto'}} src={img} alt='error message' />;\r\n};\r\n\r\nexport default ErrorMessage","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\n\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = (props) => {\n  const [char, setChar] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    if (char.description === \"\") {\n      char.description = \"We have no information about this character\";\n    }\n\n    if (char.description.length > 150) {\n      const truncatedDescription = char.description.substring(0, 150);\n\n      char.description = truncatedDescription + \"...\";\n\n      setChar((char) => char);\n    } else {\n      setChar(char);\n    }\n  };\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, []);\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={() => updateChar()}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../Spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected default state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    if (!newCharList) {\n      return;\n    }\n\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => {\n          onRequest(offset);\n        }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    if (char.description === \"\") {\n      char.description = \"We have no information about this character\";\n    }\n\n    if (char.description.length > 150) {\n      const truncatedDescription = char.description.substring(0, 150);\n\n      char.description = truncatedDescription + \"...\";\n\n      setChar(char);\n    } else {\n      setChar(char);\n    }\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        \r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === \"error\" ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={process === \"loading\"}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from \"react\";\r\nimport {Helmet} from 'react-helmet'\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoudary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      \r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        \r\n        return data;\r\n      } catch (e) {\r\n        \r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    \r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const {  request, clearError, process, setProcess } =\r\n    useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=1a829f32205e74795c839fd08a9bcba7\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    process,\r\n    setProcess\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/Spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected default state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","_jsxs","className","children","href","props","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","onCharLoaded","length","truncatedDescription","substring","useEffect","updateChar","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","imgStyle","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}